#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/arc_hunyuan_video/modular_arc_hunyuan_video.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_arc_hunyuan_video.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨

import math
from typing import Callable, Optional, Union

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.nn import CrossEntropyLoss

from transformers.activations import ACT2FN
from transformers.cache_utils import Cache, DynamicCache, EncoderDecoderCache
from transformers.generation import GenerationConfig, GenerationMixin
from transformers.modeling_attn_mask_utils import _prepare_4d_causal_attention_mask, _prepare_4d_causal_attention_mask_for_sdpa
from transformers.modeling_flash_attention_utils import FlashAttentionKwargs
from transformers.modeling_layers import GradientCheckpointingLayer
from transformers.modeling_outputs import (
    BaseModelOutput,
    BaseModelOutputWithPast,
    BaseModelOutputWithPooling,
    CausalLMOutputWithPast,
)
from transformers.modeling_utils import ALL_ATTENTION_FUNCTIONS, PreTrainedModel
from transformers.processing_utils import Unpack
from transformers.utils import is_flash_attn_2_available, is_flash_attn_greater_or_equal_2_10, logging
from transformers.models.arc_hunyuan_video.configuration_arc_hunyuan_video import (
    ARCHunyuanVideoAudioConfig,
    ARCHunyuanVideoConfig,
    ARCHunyuanVideoTextConfig,
    ARCHunyuanVideoVisionConfig,
)


if is_flash_attn_2_available():
    from flash_attn import flash_attn_func, flash_attn_varlen_func
    from flash_attn.bert_padding import index_first_axis, pad_input, unpad_input  # noqa

logger = logging.get_logger(__name__)


class ARCHunyuanVideoPreTrainedModel(PreTrainedModel):
    config_class = ARCHunyuanVideoConfig
    base_model_prefix = "model"
    supports_gradient_checkpointing = True
    _no_split_modules = ["HunYuanDecoderLayer"]
    _skip_keys_device_placement = "past_key_values"
    _supports_flash_attn_2 = True
    _supports_sdpa = True
    _supports_cache_class = True

    def _init_weights(self, module):
        std = self.config.get_text_config().initializer_range
        if isinstance(module, nn.Linear):
            module.weight.data.normal_(mean=0.0, std=std)
            if module.bias is not None:
                module.bias.data.zero_()
        elif isinstance(module, nn.Embedding):
            module.weight.data.normal_(mean=0.0, std=std)
            if module.padding_idx is not None:
                module.weight.data[module.padding_idx].zero_()


def eager_attention_forward(
    module: nn.Module,
    query: torch.Tensor,
    key: torch.Tensor,
    value: torch.Tensor,
    attention_mask: Optional[torch.Tensor],
    scaling: Optional[float] = None,
    dropout: float = 0.0,
    head_mask: Optional[torch.Tensor] = None,
    **kwargs,
):
    if scaling is None:
        scaling = query.size(-1) ** -0.5

    attn_weights = torch.matmul(query, key.transpose(2, 3)) * scaling
    if attention_mask is not None and attention_mask.ndim == 4:
        attn_weights = attn_weights + attention_mask[:, :, :, : key.shape[-2]]

    attn_weights = nn.functional.softmax(attn_weights, dim=-1)

    if head_mask is not None:
        attn_weights = attn_weights * head_mask.view(1, -1, 1, 1)

    attn_weights = nn.functional.dropout(attn_weights, p=dropout, training=module.training)
    attn_output = torch.matmul(attn_weights, value)
    attn_output = attn_output.transpose(1, 2).contiguous()

    return attn_output, attn_weights


class ARCHunyuanVideoAudioAttention(nn.Module):
    """Multi-headed attention from 'Attention Is All You Need' paper"""

    def __init__(
        self,
        embed_dim: int,
        num_heads: int,
        dropout: float = 0.0,
        is_decoder: bool = False,
        bias: bool = True,
        is_causal: bool = False,
        layer_idx: Optional[int] = None,
        config: Optional[ARCHunyuanVideoAudioConfig] = None,
    ):
        super().__init__()
        self.embed_dim = embed_dim
        self.num_heads = num_heads
        self.dropout = dropout
        self.head_dim = embed_dim // num_heads
        self.config = config

        if (self.head_dim * num_heads) != self.embed_dim:
            raise ValueError(
                f"embed_dim must be divisible by num_heads (got `embed_dim`: {self.embed_dim}"
                f" and `num_heads`: {num_heads})."
            )
        self.scaling = self.head_dim**-0.5
        self.is_decoder = is_decoder
        self.is_causal = is_causal

        if layer_idx is None and is_decoder:
            logger.warning_once(
                f"Instantiating a decoder {self.__class__.__name__} without passing `layer_idx` is not recommended and "
                "will to errors during the forward call, if caching is used. Please make sure to provide a `layer_idx` "
                "when creating this class."
            )
        self.layer_idx = layer_idx

        self.k_proj = nn.Linear(embed_dim, embed_dim, bias=False)
        self.v_proj = nn.Linear(embed_dim, embed_dim, bias=bias)
        self.q_proj = nn.Linear(embed_dim, embed_dim, bias=bias)
        self.out_proj = nn.Linear(embed_dim, embed_dim, bias=bias)

    def forward(
        self,
        hidden_states: torch.Tensor,
        key_value_states: Optional[torch.Tensor] = None,
        past_key_value: Optional[Cache] = None,
        attention_mask: Optional[torch.Tensor] = None,
        layer_head_mask: Optional[torch.Tensor] = None,
        output_attentions: bool = False,
        cache_position: Optional[torch.Tensor] = None,
        # TODO: we need a refactor so that the different attention modules can get their specific kwargs
        # ATM, we have mixed things encoder, decoder, and encoder-decoder attn
        **kwargs: Unpack[FlashAttentionKwargs],
    ) -> tuple[torch.Tensor, Optional[torch.Tensor], Optional[tuple[torch.Tensor]]]:
        """Input shape: Batch x Time x Channel"""

        # if key_value_states are provided this layer is used as a cross-attention layer
        # for the decoder
        is_cross_attention = key_value_states is not None

        # determine input shapes
        bsz, tgt_len = hidden_states.shape[:-1]
        q_input_shape = (bsz, tgt_len, -1, self.head_dim)

        # Scaling is susceptible to floating point arithmetics' inprecisions
        # which can lead to different results (this is dependent from model
        # to model, e.g. whisper is one such case). We therefore keep the
        # original order of scaling to follow the original implementation
        # and enforce no scaling (1.0) in the attention call below.
        query_states = self.q_proj(hidden_states) * self.scaling
        query_states = query_states.view(*q_input_shape)
        query_states = query_states.transpose(1, 2).contiguous()

        # Check is encoder-decoder model is being used. Otherwise we'll get `DynamicCache`
        if past_key_value is not None and isinstance(past_key_value, EncoderDecoderCache):
            is_updated = past_key_value.is_updated.get(self.layer_idx)
            if is_cross_attention:
                # after the first generated id, we can subsequently re-use all key/value_states from cache
                past_key_value.is_updated[self.layer_idx] = True
                past_key_value = past_key_value.cross_attention_cache
            else:
                past_key_value = past_key_value.self_attention_cache

        # use key_value_states if cross attention
        current_states = key_value_states if key_value_states is not None else hidden_states
        if is_cross_attention and past_key_value and is_updated:
            # reuse k,v, cross_attentions
            key_states = past_key_value.key_cache[self.layer_idx]
            value_states = past_key_value.value_cache[self.layer_idx]
        else:
            key_states = self.k_proj(current_states).view(bsz, -1, self.num_heads, self.head_dim)
            value_states = self.v_proj(current_states).view(bsz, -1, self.num_heads, self.head_dim)
            key_states = key_states.transpose(1, 2).contiguous()
            value_states = value_states.transpose(1, 2).contiguous()
            if past_key_value is not None:
                # save all key/value_states to cache to be re-used for fast auto-regressive generation
                cache_position = cache_position if not is_cross_attention else None
                key_states, value_states = past_key_value.update(
                    key_states, value_states, self.layer_idx, {"cache_position": cache_position}
                )

        attention_interface: Callable = eager_attention_forward
        if self.config._attn_implementation != "eager":
            attention_interface = ALL_ATTENTION_FUNCTIONS[self.config._attn_implementation]

        attn_output, attn_weights = attention_interface(
            self,
            query_states,
            key_states,
            value_states,
            attention_mask,
            dropout=0.0 if not self.training else self.dropout,
            scaling=1.0,
            output_attentions=output_attentions,
            head_mask=layer_head_mask,
            **kwargs,
        )

        attn_output = attn_output.reshape(bsz, tgt_len, -1).contiguous()
        attn_output = self.out_proj(attn_output)

        return attn_output, attn_weights


class ARCHunyuanVideoAudioEncoderLayer(GradientCheckpointingLayer):
    def __init__(self, config: ARCHunyuanVideoAudioConfig):
        super().__init__()
        self.embed_dim = config.d_model

        self.self_attn = ARCHunyuanVideoAudioAttention(
            embed_dim=self.embed_dim,
            num_heads=config.encoder_attention_heads,
            dropout=config.attention_dropout,
            config=config,
        )
        self.self_attn_layer_norm = nn.LayerNorm(self.embed_dim)
        self.dropout = config.dropout
        self.activation_fn = ACT2FN[config.activation_function]
        self.activation_dropout = config.activation_dropout
        self.fc1 = nn.Linear(self.embed_dim, config.encoder_ffn_dim)
        self.fc2 = nn.Linear(config.encoder_ffn_dim, self.embed_dim)
        self.final_layer_norm = nn.LayerNorm(self.embed_dim)

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: torch.Tensor,
        layer_head_mask: torch.Tensor,
        output_attentions: bool = False,
    ) -> torch.Tensor:
        """
        Args:
            hidden_states (`torch.FloatTensor`): input to the layer of shape `(batch, seq_len, embed_dim)`
            attention_mask (`torch.FloatTensor`): attention mask of size
                `(batch, 1, tgt_len, src_len)` where padding elements are indicated by very large negative values.
            layer_head_mask (`torch.FloatTensor`): mask for attention heads in a given layer of size
                `(encoder_attention_heads,)`.
            output_attentions (`bool`, *optional*):
                Whether or not to return the attentions tensors of all attention layers. See `attentions` under
                returned tensors for more detail.
        """
        residual = hidden_states
        hidden_states = self.self_attn_layer_norm(hidden_states)
        hidden_states, attn_weights = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            layer_head_mask=layer_head_mask,
            output_attentions=output_attentions,
        )
        hidden_states = nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)
        hidden_states = residual + hidden_states

        residual = hidden_states
        hidden_states = self.final_layer_norm(hidden_states)
        hidden_states = self.activation_fn(self.fc1(hidden_states))
        hidden_states = nn.functional.dropout(hidden_states, p=self.activation_dropout, training=self.training)
        hidden_states = self.fc2(hidden_states)
        hidden_states = nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)
        hidden_states = residual + hidden_states

        if hidden_states.dtype == torch.float16:
            clamp_value = torch.finfo(hidden_states.dtype).max - 1000
            hidden_states = torch.clamp(hidden_states, min=-clamp_value, max=clamp_value)

        return hidden_states, attn_weights


class ARCHunyuanVideoAudioEncoder(ARCHunyuanVideoPreTrainedModel):
    """
    Transformer encoder consisting of *config.encoder_layers* self attention layers. Each layer is a
    [`ARCHunyuanVideoAudioEncoderLayer`].

    Args:
        config: ARCHunyuanVideoAudioConfig
    """

    def __init__(self, config: ARCHunyuanVideoAudioConfig):
        super().__init__(config)
        self.dropout = config.dropout
        self.layerdrop = config.encoder_layerdrop

        embed_dim = config.d_model
        self.num_mel_bins = config.num_mel_bins
        self.padding_idx = config.pad_token_id
        self.max_source_positions = config.max_source_positions
        self.embed_scale = math.sqrt(embed_dim) if config.scale_embedding else 1.0

        self.conv1 = nn.Conv1d(self.num_mel_bins, embed_dim, kernel_size=3, padding=1)
        self.conv2 = nn.Conv1d(embed_dim, embed_dim, kernel_size=3, stride=2, padding=1)

        self.embed_positions = nn.Embedding(self.max_source_positions, embed_dim)
        self.embed_positions.requires_grad_(False)

        self.layers = nn.ModuleList([ARCHunyuanVideoAudioEncoderLayer(config) for _ in range(config.encoder_layers)])
        self.layer_norm = nn.LayerNorm(config.d_model)

        self.gradient_checkpointing = False
        # Initialize weights and apply final processing
        self.post_init()

    def _freeze_parameters(self):
        for param in self.parameters():
            param.requires_grad = False
        self._requires_grad = False

    def get_input_embeddings(self) -> nn.Module:
        return self.conv1

    def set_input_embeddings(self, value: nn.Module):
        self.conv1 = value

    def forward(
        self,
        input_features,
        attention_mask=None,
        head_mask=None,
        output_attentions=None,
        output_hidden_states=None,
        return_dict=None,
    ):
        expected_seq_length = self.config.max_source_positions * self.conv1.stride[0] * self.conv2.stride[0]
        if input_features.shape[-1] != expected_seq_length:
            raise ValueError(
                f"Whisper expects the mel input features to be of length {expected_seq_length}, but found {input_features.shape[-1]}. Make sure to pad the input mel features to {expected_seq_length}."
            )

        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
        inputs_embeds = nn.functional.gelu(self.conv1(input_features))
        inputs_embeds = nn.functional.gelu(self.conv2(inputs_embeds))

        inputs_embeds = inputs_embeds.permute(0, 2, 1)
        all_positions = torch.arange(self.embed_positions.num_embeddings, device=inputs_embeds.device)

        hidden_states = inputs_embeds + self.embed_positions(all_positions)
        hidden_states = nn.functional.dropout(hidden_states, p=self.dropout, training=self.training)

        encoder_states = () if output_hidden_states else None
        all_attentions = () if output_attentions else None

        # check if head_mask has a correct number of layers specified if desired
        if head_mask is not None:
            assert head_mask.size()[0] == (len(self.layers)), (
                f"The head_mask should be specified for {len(self.layers)} layers, but it is for {head_mask.size()[0]}."
            )

        for idx, encoder_layer in enumerate(self.layers):
            if output_hidden_states:
                encoder_states = encoder_states + (hidden_states,)
            # add LayerDrop (see https://huggingface.co/papers/1909.11556 for description)
            to_drop = False
            if self.training:
                dropout_probability = torch.rand([])
                if dropout_probability < self.layerdrop:  # skip the layer
                    to_drop = True

            if to_drop:
                layer_outputs = (None, None)
            else:
                layer_outputs = encoder_layer(
                    hidden_states,
                    None,
                    layer_head_mask=(head_mask[idx] if head_mask is not None else None),
                    output_attentions=output_attentions,
                )

                hidden_states = layer_outputs[0]

            if output_attentions:
                all_attentions = all_attentions + (layer_outputs[1],)

        hidden_states = self.layer_norm(hidden_states)
        if output_hidden_states:
            encoder_states = encoder_states + (hidden_states,)

        if not return_dict:
            return tuple(v for v in [hidden_states, encoder_states, all_attentions] if v is not None)
        return BaseModelOutput(
            last_hidden_state=hidden_states, hidden_states=encoder_states, attentions=all_attentions
        )


################################################################################
# Video Encoder
################################################################################


class ARCHunyuanVideoNaVitTransformer(nn.Module):
    def __init__(self, config: ARCHunyuanVideoVisionConfig):
        super().__init__()
        self.config = config
        self.gradient_checkpointing = False

        self._use_sdpa = config._attn_implementation == "sdpa"
        self._use_flash_attention_2 = config._attn_implementation == "flash_attention_2"

        self.layers = nn.ModuleList(
            [ARCHunyuanVideoDecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]
        )

    def forward(
        self,
        pixel_values: Optional[torch.FloatTensor] = None,
    ) -> Union[tuple, BaseModelOutputWithPooling]:
        hidden_states, attention_mask, img_pos = self.embeddings(pixel_values)
        attention_mask = attention_mask.bool()
        batch_size, seq_length, _ = hidden_states.shape
        past_key_values_length = 0

        if self._use_flash_attention_2:  # 2D mask for flash attention 2
            attention_mask = attention_mask if (attention_mask is not None and 0 in attention_mask) else None
        elif self._use_sdpa:
            attention_mask_float = torch.zeros_like(attention_mask, dtype=hidden_states.dtype)
            attention_mask_float = attention_mask_float.masked_fill(
                ~attention_mask, torch.finfo(hidden_states.dtype).min
            )
            attention_mask = _prepare_4d_causal_attention_mask_for_sdpa(
                attention_mask_float,
                (batch_size, seq_length),
                hidden_states,
                past_key_values_length,
            )
        else:
            attention_mask_int = attention_mask.int()
            attention_mask = _prepare_4d_causal_attention_mask(
                attention_mask_int,
                (batch_size, seq_length),
                hidden_states,
                past_key_values_length,
            )

        for layer_idx, decoder_layer in enumerate(self.layers):
            if self.gradient_checkpointing and self.training:
                layer_outputs = torch.utils.checkpoint.checkpoint(
                    decoder_layer.__call__, hidden_states, attention_mask
                )
            else:
                layer_outputs = decoder_layer(hidden_states, attention_mask=attention_mask)
            hidden_states = layer_outputs[0]

        return hidden_states, img_pos


class ARCHunyuanVideoAnyResCLIPVisionEmbeddings(nn.Module):
    def __init__(self, config: ARCHunyuanVideoVisionConfig):
        super().__init__()

        self.config = config
        self.embed_dim = config.hidden_size
        self.image_size = config.max_image_size
        self.patch_size = config.patch_size
        self.max_seq_len = config.max_vit_seq_len
        self.force_image_size = config.force_image_size

        self.patch_embedding = nn.Conv2d(
            in_channels=config.num_channels,
            out_channels=self.embed_dim,
            kernel_size=self.patch_size,
            stride=self.patch_size,
            bias=True,
        )

        self.num_patches = (self.image_size // self.patch_size) ** 2

        self.num_positions = self.num_patches + 1
        self.register_buffer("position_ids", torch.arange(self.num_positions).expand((1, -1)))
        self.position_embedding = nn.Embedding(self.num_positions, self.embed_dim)

    def interpolate_pos_encoding(self, embeddings: torch.Tensor, height: int, width: int) -> torch.Tensor:
        num_patches = embeddings.shape[1]
        position_embeddings = self.position_embedding(self.position_ids)
        patch_pos_embed = position_embeddings[:, 1:]
        num_positions = position_embeddings.shape[1] - 1
        if num_patches == num_positions and height == width:
            return patch_pos_embed
        dim = embeddings.shape[-1]
        h0 = height // self.patch_size
        w0 = width // self.patch_size
        h0, w0 = h0 + 0.1, w0 + 0.1
        patch_pos_embed = patch_pos_embed.reshape(1, int(math.sqrt(num_positions)), int(math.sqrt(num_positions)), dim)
        patch_pos_embed = patch_pos_embed.permute(0, 3, 1, 2)
        raw_type = patch_pos_embed.dtype
        patch_pos_embed = nn.functional.interpolate(
            patch_pos_embed.to(torch.float32, non_blocking=True),
            scale_factor=(h0 / math.sqrt(num_positions), w0 / math.sqrt(num_positions)),
            mode="bilinear",
            align_corners=False,
        )
        patch_pos_embed = patch_pos_embed.to(raw_type, non_blocking=True)
        assert int(h0) == patch_pos_embed.shape[-2] and int(w0) == patch_pos_embed.shape[-1]
        patch_pos_embed = patch_pos_embed.permute(0, 2, 3, 1).view(1, -1, dim)
        return patch_pos_embed

    def forward_single(self, pixel_values: torch.FloatTensor) -> torch.Tensor:
        if pixel_values.ndim == 3:
            pixel_values = pixel_values[None]
        batch_size, num_channels, height, width = pixel_values.shape

        patch_embeds = self.patch_embedding(pixel_values)
        b, c, h, w = patch_embeds.shape

        patch_embeds = patch_embeds.flatten(2).transpose(1, 2)
        embeddings = patch_embeds + self.interpolate_pos_encoding(patch_embeds, height, width)
        return embeddings, (h, w)

    def forward(self, images: list[list[torch.Tensor]]):
        max_seq_len = self.max_seq_len
        B = images.shape[0]
        L = max_seq_len

        E = self.embed_dim
        embeddings = (
            torch.zeros(B, L, E, dtype=self.config.torch_dtype, requires_grad=True)
            .cuda(non_blocking=True)
            .to(images.device)
        )

        embs, _ = self.forward_single(images)

        assert embs.ndim == 3, "(B, L, E)"

        a2 = 4
        start = 0 * a2
        end = int((self.force_image_size / 32) * (self.force_image_size / 32)) * a2
        embeddings[:, start:end] = embs

        if self.config._attn_implementation == "flash_attention_2":
            attn_mask = embeddings.new_full((B, L), False, dtype=torch.bool)
            attn_mask[:, start:end] = True
        else:
            attn_mask = embeddings.new_full((B, 1, L, L), False, dtype=torch.bool)
            attn_mask[:, :, start:end, start:end] = True

        pos_groups = None
        return embeddings, attn_mask, pos_groups


class ARCHunyuanVideoAnyResVitTransformer(ARCHunyuanVideoNaVitTransformer):
    def __init__(self, config: ARCHunyuanVideoVisionConfig):
        super().__init__(config)
        self.embeddings = ARCHunyuanVideoAnyResCLIPVisionEmbeddings(config)


class ARCHunyuanVideoSimpleConvMlp(nn.Module):
    def __init__(self, in_channels, out_channels, anyres_pooling_size, rms_norm_eps, cat_extra_token=True):
        super().__init__()

        embed_std = 1 / math.sqrt(out_channels)
        self.proj = nn.Sequential(
            nn.Conv2d(in_channels, in_channels * 2, kernel_size=anyres_pooling_size, stride=anyres_pooling_size),
            nn.GELU(),
            nn.Conv2d(in_channels * 2, in_channels * 4, kernel_size=1),
        )
        self.mlp = nn.Linear(in_channels * 4, out_channels)
        self.image_newline = nn.Parameter(torch.randn(in_channels * 4) * embed_std)

        self.image_begin = nn.Parameter(torch.randn(out_channels) * embed_std)
        self.image_end = nn.Parameter(torch.randn(out_channels) * embed_std)

        self.image_sep = nn.Parameter(torch.randn(out_channels) * embed_std)

        self.cat_extra_token = cat_extra_token
        self.use_rms_norm = True
        if self.use_rms_norm:
            self.before_rms = ARCHunyuanVideoRMSNorm(in_channels, eps=rms_norm_eps)
            self.after_rms = ARCHunyuanVideoRMSNorm(out_channels, eps=rms_norm_eps)

    def forward(self, x, size=(16, 16), x2=None, size2=(16, 16), is_video=False):
        return self.single_forward(x=x, size=size, x2=x2, size2=size2, is_video=is_video)

    def single_forward(self, x, size=(16, 16), x2=None, size2=(16, 16), is_video=False):
        remove_vit_special_tokens = False
        if self.use_rms_norm:
            x = self.before_rms(x)
        h, w = size
        dtype = x.dtype
        x = x.permute(0, 2, 1).reshape(x.shape[0], -1, h, w)

        x = self.proj(x)  # b,c,h,w
        if is_video:
            video_avgpool_size = 2
            stride = 2
            x = F.avg_pool2d(x, kernel_size=video_avgpool_size, stride=stride)

        b, c, h, w = x.shape
        if not remove_vit_special_tokens:
            x = torch.cat(
                [x, self.image_newline.reshape(1, c, 1, 1).expand(b, c, h, 1).to(dtype, non_blocking=True)], dim=-1
            )
        x = x.reshape(b, c, -1).permute(0, 2, 1)
        x = self.mlp(x)

        if x2 is not None:
            h2, w2 = size2
            x2 = x2.permute(0, 2, 1).reshape(x2.shape[0], -1, h2, w2)
            if self.poolmlp:
                x2 = F.avg_pool2d(x2, 2)
                x2 = self.proj(x2.permute(0, 2, 3, 1))  # b, h, w, c
                x2 = self.vit_linear_encoder(x2)
                b2, h2, w2, c2 = x2.shape
                if not remove_vit_special_tokens:
                    x2 = torch.cat(
                        [
                            x2,
                            self.image_newline.reshape(1, 1, 1, c2).expand(b2, h2, 1, c2).to(dtype, non_blocking=True),
                        ],
                        dim=2,
                    )
                x2 = x2.reshape(b2, -1, c2)
            else:
                x2 = self.proj(x2)
                b2, c2, h2, w2 = x2.shape
                if not remove_vit_special_tokens:
                    x2 = torch.cat(
                        [
                            x2,
                            self.image_newline.reshape(1, c2, 1, 1).expand(b2, c2, h2, 1).to(dtype, non_blocking=True),
                        ],
                        dim=-1,
                    )
                x2 = x2.reshape(b2, c2, -1).permute(0, 2, 1)  # b,n,c
                x2 = self.mlp(x2)

            sep = self.image_sep.reshape(1, 1, -1).expand(b2, 1, x2.shape[-1]).to(dtype, non_blocking=True)

            x = torch.cat([x, sep, x2], dim=1)

        if self.cat_extra_token:
            begin = self.image_begin.reshape(1, 1, -1).expand(b, 1, x.shape[-1]).to(dtype, non_blocking=True)
            end = self.image_end.reshape(1, 1, -1).expand(b, 1, x.shape[-1]).to(dtype, non_blocking=True)
            x = torch.cat([begin, x, end], dim=1)

        if self.use_rms_norm:
            return self.after_rms(x)
        else:
            return x


class ARCHunyuanVideoVisionModel(torch.nn.Module):
    def __init__(self, vision_config: ARCHunyuanVideoVisionConfig, text_config: ARCHunyuanVideoTextConfig):
        super().__init__()
        self.vision_config = vision_config
        self.text_config = text_config
        self.vit = ARCHunyuanVideoAnyResVitTransformer(vision_config)

        self.perceive = ARCHunyuanVideoSimpleConvMlp(
            vision_config.hidden_size,
            text_config.hidden_size,
            vision_config.anyres_pooling_size,
            text_config.rms_norm_eps,
        )

    def forward(self, images, img_index=None):
        images_feats, _ = self.vit(pixel_values=images)

        perceive_fn = lambda x, img_size, is_video: self.perceive(x, img_size, is_video=True)
        a2 = 4
        begin = 0 * a2
        end = int((self.vision_config.force_image_size / 32) * (self.vision_config.force_image_size / 32)) * a2
        image_size = (int(self.vision_config.force_image_size / 16), int(self.vision_config.force_image_size / 16))

        images_feats = perceive_fn(images_feats[:, begin:end], image_size, is_video=True)

        return images_feats


class ARCHunyuanVideoRMSNorm(nn.Module):
    def __init__(self, hidden_size, eps=1e-6):
        super().__init__()
        self.weight = nn.Parameter(torch.ones(hidden_size))
        self.variance_epsilon = eps

    def forward(self, hidden_states):
        input_dtype = hidden_states.dtype
        hidden_states = hidden_states.to(torch.float32)
        variance = hidden_states.pow(2).mean(-1, keepdim=True)
        hidden_states = hidden_states * torch.rsqrt(variance + self.variance_epsilon)
        return self.weight * hidden_states.to(input_dtype)


class ARCHunyuanVideoRotaryEmbedding(nn.Module):
    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None):
        super().__init__()

        self.dim = dim
        self.max_position_embeddings = max_position_embeddings
        self.base = base
        inv_freq = 1.0 / (self.base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))
        self.register_buffer("inv_freq", inv_freq, persistent=False)
        self._set_cos_sin_cache(
            seq_len=max_position_embeddings, device=self.inv_freq.device, dtype=torch.get_default_dtype()
        )

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        t = torch.arange(self.max_seq_len_cached, device=device, dtype=torch.float32)
        freqs = torch.outer(t, self.inv_freq)
        emb = torch.cat((freqs, freqs), dim=-1).float()
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)

    def forward(self, x, seq_len=None):
        if seq_len > self.max_seq_len_cached:
            self._set_cos_sin_cache(seq_len=seq_len, device=x.device, dtype=x.dtype)
        return (
            self.cos_cached[:seq_len].to(dtype=x.dtype),
            self.sin_cached[:seq_len].to(dtype=x.dtype),
        )


class ARCHunyuanVideoLinearScalingRotaryEmbedding(ARCHunyuanVideoRotaryEmbedding):
    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):
        self.scaling_factor = scaling_factor
        super().__init__(dim, max_position_embeddings, base, device)

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)
        t = t / self.scaling_factor
        freqs = torch.outer(t, self.inv_freq)
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)


class ARCHunyuanVideoDynamicNTKScalingRotaryEmbedding(ARCHunyuanVideoRotaryEmbedding):
    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_factor=1.0):
        self.scaling_factor = scaling_factor
        super().__init__(dim, max_position_embeddings, base, device)

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        if seq_len > self.max_position_embeddings:
            base = self.base * (
                (self.scaling_factor * seq_len / self.max_position_embeddings) - (self.scaling_factor - 1)
            ) ** (self.dim / (self.dim - 2))
            inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))
            self.register_buffer("inv_freq", inv_freq, persistent=False)
        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)
        freqs = torch.outer(t, self.inv_freq)
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)


class ARCHunyuanVideoDynamicNTKAlphaRotaryEmbedding(ARCHunyuanVideoRotaryEmbedding):
    """
    HunYuanRotaryEmbedding extended with Dynamic NTK scaling.
    Credits to the Reddit users /u/bloc97 and /u/emozilla
    """

    def __init__(self, dim, max_position_embeddings=2048, base=10000, device=None, scaling_alpha=1.0):
        self.scaling_alpha = scaling_alpha
        super().__init__(dim, max_position_embeddings, base, device)

    def _set_cos_sin_cache(self, seq_len, device, dtype):
        self.max_seq_len_cached = seq_len
        base = self.base * self.scaling_alpha ** (self.dim / (self.dim - 2))
        inv_freq = 1.0 / (base ** (torch.arange(0, self.dim, 2).float().to(device) / self.dim))

        self.register_buffer("inv_freq", inv_freq, persistent=False)

        t = torch.arange(self.max_seq_len_cached, device=device, dtype=self.inv_freq.dtype)

        freqs = torch.outer(t, self.inv_freq)
        emb = torch.cat((freqs, freqs), dim=-1)
        self.register_buffer("cos_cached", emb.cos().to(dtype), persistent=False)
        self.register_buffer("sin_cached", emb.sin().to(dtype), persistent=False)


class ARCHunyuanVideoMLP(nn.Module):
    def __init__(self, config, layer_idx=None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx
        self.hidden_size = config.hidden_size
        self.hidden_act = config.hidden_act
        self.intermediate_size = config.intermediate_size

        self.act_fn = ACT2FN[config.hidden_act]
        if self.hidden_act == "silu":
            self.gate_and_up_proj = nn.Linear(self.hidden_size, self.intermediate_size * 2, bias=config.mlp_bias)
            self.down_proj = nn.Linear(self.intermediate_size, self.hidden_size, bias=config.mlp_bias)
        elif self.hidden_act == "gelu":
            self.dense_h_to_4h = nn.Linear(self.hidden_size, self.intermediate_size, bias=config.mlp_bias)
            self.dense_4h_to_h = nn.Linear(self.intermediate_size, self.hidden_size, bias=config.mlp_bias)
        else:
            raise NotImplementedError(f"hidden_act {self.hidden_act} is not supported")

    def forward(self, x):
        if self.hidden_act == "silu":
            gate_and_up_proj = self.gate_and_up_proj(x)
            x1, x2 = gate_and_up_proj.chunk(2, dim=-1)
            down_proj = self.down_proj(x1 * self.act_fn(x2))
            return down_proj
        elif self.hidden_act == "gelu":
            intermediate = self.dense_h_to_4h(x)
            intermediate = self.act_fn(intermediate)
            output = self.dense_4h_to_h(intermediate)
            return output
        else:
            raise NotImplementedError(f"hidden_act {self.hidden_act} is not supported")


def rotate_half(x):
    x1 = x[..., : x.shape[-1] // 2]
    x2 = x[..., x.shape[-1] // 2 :]
    return torch.cat((-x2, x1), dim=-1)


def apply_rotary_pos_emb(q, k, cos, sin, position_ids, unsqueeze_dim=1):
    cos = cos[position_ids].unsqueeze(unsqueeze_dim)
    sin = sin[position_ids].unsqueeze(unsqueeze_dim)
    q_embed = (q * cos) + (rotate_half(q) * sin)
    k_embed = (k * cos) + (rotate_half(k) * sin)
    return q_embed, k_embed


def apply_rotary_pos_emb_xdrope(q, k, cos, sin, position_ids, xdrope_section, output_size=None, bf16=False):
    x_dim = len(xdrope_section)
    assert position_ids.max() < cos.shape[0], f"position_ids.max() {position_ids.max()}, cos.shape {cos.shape}"

    cos = cos[position_ids, ...].permute(0, 2, 1, 3).reshape(output_size[0], output_size[2], x_dim, -1).contiguous()
    sin = sin[position_ids, ...].permute(0, 2, 1, 3).reshape(output_size[0], output_size[2], x_dim, -1).contiguous()

    xdrope_section = [int(x * q.shape[-1] / 2) for x in xdrope_section] * 2
    assert sum(xdrope_section) == cos.shape[-1], (
        f"Illegal partition for xd rope, {sum(xdrope_section)} != {cos.shape[-1]} "
    )
    cos = torch.cat([m[:, :, i % x_dim, :] for i, m in enumerate(cos.split(xdrope_section, dim=-1))], dim=-1)
    sin = torch.cat([m[:, :, i % x_dim, :] for i, m in enumerate(sin.split(xdrope_section, dim=-1))], dim=-1)

    cos = cos.view(output_size[0], 1, output_size[2], -1)
    sin = sin.view(output_size[0], 1, output_size[2], -1)

    if bf16:
        return (q * cos) + (rotate_half(q) * sin), (k * cos) + (rotate_half(k) * sin)
    else:
        return (q * cos) + (rotate_half(q) * sin).to(q.dtype), (k * cos) + (rotate_half(k) * sin).to(k.dtype)


def repeat_kv(hidden_states: torch.Tensor, n_rep: int) -> torch.Tensor:
    batch, num_key_value_heads, slen, head_dim = hidden_states.shape
    if n_rep == 1:
        return hidden_states
    hidden_states = hidden_states[:, :, None, :, :].expand(batch, num_key_value_heads, n_rep, slen, head_dim)
    return hidden_states.reshape(batch, num_key_value_heads * n_rep, slen, head_dim)


class ARCHunyuanVideoAttention(nn.Module):
    def __init__(self, config, layer_idx: Optional[int] = None):
        super().__init__()
        self.config = config
        self.layer_idx = layer_idx

        self.attention_dropout = config.attention_dropout
        self.hidden_size = config.hidden_size
        self.num_heads = config.num_attention_heads
        self.head_dim = config.attention_head_dim
        self.num_key_value_heads = config.num_key_value_heads
        self.num_key_value_groups = self.num_heads // self.num_key_value_heads
        self.max_position_embeddings = getattr(config, "max_position_embeddings", 8192)
        self.rope_theta = getattr(config, "rope_theta", 10000.0)
        self.is_causal = config.is_causal
        self.use_qk_norm = config.use_qk_norm
        self.use_rotary_pos_emb = config.use_rotary_pos_emb
        self.hidden_size_q = self.head_dim * self.num_heads
        self.hidden_size_kv = self.head_dim * self.num_key_value_heads

        self.qkv_proj = nn.Linear(
            self.hidden_size, self.hidden_size_q + 2 * self.hidden_size_kv, bias=config.attention_bias
        )

        self.o_proj = nn.Linear(self.hidden_size_q, self.hidden_size, bias=config.attention_bias)
        if self.use_qk_norm:
            self.query_layernorm = ARCHunyuanVideoRMSNorm(self.head_dim, eps=config.rms_norm_eps)
            self.key_layernorm = ARCHunyuanVideoRMSNorm(self.head_dim, eps=config.rms_norm_eps)
        if self.use_rotary_pos_emb:
            self._init_rope()
            self.position_embedding_xdrope = config.position_embedding_xdrope
            self.xdrope_section = config.xdrope_section

    def _init_rope(self):
        if self.config.rope_scaling is None:
            self.rotary_emb = ARCHunyuanVideoRotaryEmbedding(
                self.head_dim,
                max_position_embeddings=self.max_position_embeddings,
                base=self.rope_theta,
            )
        else:
            scaling_type = self.config.rope_scaling["type"]
            scaling_factor = self.config.rope_scaling["factor"]
            scaling_alpha = self.config.rope_scaling["alpha"]
            if scaling_type == "linear":
                self.rotary_emb = ARCHunyuanVideoLinearScalingRotaryEmbedding(
                    self.head_dim,
                    max_position_embeddings=self.max_position_embeddings,
                    scaling_factor=scaling_factor,
                    base=self.rope_theta,
                )
            elif scaling_type == "dynamic":
                if scaling_alpha:
                    self.rotary_emb = ARCHunyuanVideoDynamicNTKAlphaRotaryEmbedding(
                        self.head_dim,
                        max_position_embeddings=self.max_position_embeddings,
                        scaling_alpha=scaling_alpha,
                        base=self.rope_theta,
                    )
                else:
                    self.rotary_emb = ARCHunyuanVideoDynamicNTKScalingRotaryEmbedding(
                        self.head_dim,
                        max_position_embeddings=self.max_position_embeddings,
                        scaling_factor=scaling_factor,
                        base=self.rope_theta,
                    )
            else:
                raise ValueError(f"Unknown RoPE scaling type {scaling_type}")

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        kv_states: torch.Tensor = None,
        **kwargs,
    ) -> tuple[torch.Tensor, Optional[torch.Tensor], Optional[tuple[torch.Tensor]]]:
        bsz, q_len, _ = hidden_states.size()

        qkv_states = self.qkv_proj(hidden_states)
        qkv_states = qkv_states.reshape(
            bsz, q_len, self.num_key_value_heads, self.num_key_value_groups + 2, self.head_dim
        )
        query_states, key_states, value_states = torch.split(qkv_states, (self.num_key_value_groups, 1, 1), dim=3)
        orig_key_states, orig_value_states = key_states, value_states

        query_states = query_states.reshape(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = key_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        value_states = value_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)

        kv_seq_len = key_states.shape[-2]
        if past_key_value is not None:
            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)

        if self.use_rotary_pos_emb:
            cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)

            if self.position_embedding_xdrope and (
                past_key_value is None or past_key_value.get_usable_length(kv_seq_len, self.layer_idx) == 0
            ):
                output_size = (query_states.size(0), query_states.size(1), query_states.size(2), key_states.size(2))
                bf16 = self.config.torch_dtype == torch.bfloat16
                query_states, key_states = apply_rotary_pos_emb_xdrope(
                    query_states, key_states, cos, sin, position_ids, self.xdrope_section, output_size, bf16
                )
            else:
                if not self.position_embedding_xdrope:
                    query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)
                else:
                    # print(position_ids.shape)
                    position_ids = torch.ones(
                        1, position_ids.shape[1], 1, dtype=torch.long, device=position_ids.device
                    ) * past_key_value.get_usable_length(kv_seq_len, self.layer_idx)

                    output_size = (
                        query_states.size(0),
                        query_states.size(1),
                        query_states.size(2),
                        key_states.size(2),
                    )
                    bf16 = self.config.torch_dtype == torch.bfloat16
                    query_states, key_states = apply_rotary_pos_emb_xdrope(
                        query_states, key_states, cos, sin, position_ids, self.xdrope_section, output_size, bf16
                    )

        if self.use_qk_norm:
            query_states = self.query_layernorm(query_states)
            key_states = self.key_layernorm(key_states)

        if past_key_value is not None:
            cache_kwargs = {"sin": sin, "cos": cos}  # Specific to RoPE models
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)

        key_states = repeat_kv(key_states, self.num_key_value_groups)
        value_states = repeat_kv(value_states, self.num_key_value_groups)

        attn_weights = torch.matmul(query_states, key_states.transpose(2, 3)) / math.sqrt(self.head_dim)

        if attention_mask is not None:
            attn_weights = attn_weights + attention_mask

        attn_weights = nn.functional.softmax(attn_weights, dim=-1, dtype=torch.float32).to(query_states.dtype)
        attn_weights = nn.functional.dropout(attn_weights, p=self.attention_dropout, training=self.training)
        attn_output = torch.matmul(attn_weights, value_states)
        attn_output = attn_output.transpose(1, 2).contiguous()
        attn_output = attn_output.reshape(bsz, q_len, -1)
        attn_output = self.o_proj(attn_output)

        if not output_attentions:
            attn_weights = None

        return attn_output, attn_weights, past_key_value, (orig_key_states, orig_value_states)


class ARCHunyuanVideoFlashAttention2(ARCHunyuanVideoAttention):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self._flash_attn_uses_top_left_mask = not is_flash_attn_greater_or_equal_2_10()

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.LongTensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        kv_states: torch.Tensor = None,
        **kwargs,
    ) -> tuple[torch.Tensor, Optional[torch.Tensor], Optional[tuple[torch.Tensor]]]:
        bsz, q_len, _ = hidden_states.size()

        qkv_states = self.qkv_proj(hidden_states)
        qkv_states = qkv_states.reshape(
            bsz, q_len, self.num_key_value_heads, self.num_key_value_groups + 2, self.head_dim
        )
        query_states, key_states, value_states = torch.split(qkv_states, (self.num_key_value_groups, 1, 1), dim=3)
        orig_key_states, orig_value_states = key_states, value_states

        query_states = query_states.reshape(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = key_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        value_states = value_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)

        kv_seq_len = key_states.shape[-2]
        if past_key_value is not None:
            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)

        if self.use_rotary_pos_emb:
            cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)

            if self.position_embedding_xdrope and (
                past_key_value is None or past_key_value.get_usable_length(kv_seq_len, self.layer_idx) == 0
            ):
                output_size = (query_states.size(0), query_states.size(1), query_states.size(2), key_states.size(2))
                bf16 = self.config.torch_dtype == torch.bfloat16
                query_states, key_states = apply_rotary_pos_emb_xdrope(
                    query_states, key_states, cos, sin, position_ids, self.xdrope_section, output_size, bf16
                )
            else:
                if not self.position_embedding_xdrope:
                    query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)
                else:
                    # print(position_ids.shape)
                    position_ids = torch.ones(
                        1, position_ids.shape[1], 1, dtype=torch.long, device=position_ids.device
                    ) * past_key_value.get_usable_length(kv_seq_len, self.layer_idx)

                    output_size = (
                        query_states.size(0),
                        query_states.size(1),
                        query_states.size(2),
                        key_states.size(2),
                    )
                    bf16 = self.config.torch_dtype == torch.bfloat16
                    query_states, key_states = apply_rotary_pos_emb_xdrope(
                        query_states, key_states, cos, sin, position_ids, self.xdrope_section, output_size, bf16
                    )

        if self.use_qk_norm:
            query_states = self.query_layernorm(query_states)
            key_states = self.key_layernorm(key_states)

        if past_key_value is not None:
            cache_kwargs = {"sin": sin, "cos": cos}  # Specific to RoPE models
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx, cache_kwargs)

        query_states = query_states.transpose(1, 2)
        key_states = key_states.transpose(1, 2)
        value_states = value_states.transpose(1, 2)

        dropout_rate = self.attention_dropout if self.training else 0.0
        input_dtype = query_states.dtype
        if input_dtype == torch.float32:
            target_dtype = self.q_proj.weight.dtype
            query_states = query_states.to(target_dtype)
            key_states = key_states.to(target_dtype)
            value_states = value_states.to(target_dtype)

        attn_output = self._flash_attention_forward(
            query_states, key_states, value_states, attention_mask, q_len, dropout=dropout_rate
        )

        attn_output = attn_output.reshape(bsz, q_len, -1).contiguous()
        attn_output = self.o_proj(attn_output)

        return attn_output, None, past_key_value, (orig_key_states, orig_value_states)

    def _flash_attention_forward(
        self, query_states, key_states, value_states, attention_mask, query_length, dropout=0.0, softmax_scale=None
    ):
        causal = self.is_causal and query_length != 1
        key_states = repeat_kv(key_states.transpose(1, 2), self.num_key_value_groups).transpose(1, 2)
        value_states = repeat_kv(value_states.transpose(1, 2), self.num_key_value_groups).transpose(1, 2)

        if attention_mask is not None:
            batch_size = query_states.shape[0]
            query_states, key_states, value_states, indices_q, cu_seq_lens, max_seq_lens = self._upad_input(
                query_states, key_states, value_states, attention_mask, query_length
            )
            cu_seqlens_q, cu_seqlens_k = cu_seq_lens
            max_seqlen_in_batch_q, max_seqlen_in_batch_k = max_seq_lens
            attn_output_unpad = flash_attn_varlen_func(
                query_states,
                key_states,
                value_states,
                cu_seqlens_q=cu_seqlens_q,
                cu_seqlens_k=cu_seqlens_k,
                max_seqlen_q=max_seqlen_in_batch_q,
                max_seqlen_k=max_seqlen_in_batch_k,
                dropout_p=dropout,
                softmax_scale=softmax_scale,
                causal=causal,
            )
            attn_output = pad_input(attn_output_unpad, indices_q, batch_size, query_length)
        else:
            attn_output = flash_attn_func(
                query_states, key_states, value_states, dropout, softmax_scale=softmax_scale, causal=causal
            )
        return attn_output

    def _upad_input(self, query_layer, key_layer, value_layer, attention_mask, query_length):
        batch_size, kv_seq_len, num_heads, head_dim = key_layer.shape
        indices_k = torch.nonzero(attention_mask.flatten(), as_tuple=False).flatten()
        key_layer = index_first_axis(key_layer.reshape(batch_size * kv_seq_len, num_heads, head_dim), indices_k)
        value_layer = index_first_axis(value_layer.reshape(batch_size * kv_seq_len, num_heads, head_dim), indices_k)

        seqlens_in_batch = attention_mask.sum(dim=-1, dtype=torch.int32)
        cu_seqlens_k = F.pad(torch.cumsum(seqlens_in_batch, dim=0, dtype=torch.int32), (1, 0))
        max_seqlen_in_batch_k = seqlens_in_batch.max().item()

        if query_length == kv_seq_len:
            query_layer = index_first_axis(
                query_layer.reshape(batch_size * kv_seq_len, self.num_heads, head_dim), indices_k
            )
            cu_seqlens_q = cu_seqlens_k
            max_seqlen_in_batch_q = max_seqlen_in_batch_k
            indices_q = indices_k
        else:
            attention_mask = attention_mask[:, -query_length:]
            query_layer, indices_q, cu_seqlens_q, max_seqlen_in_batch_q = unpad_input(query_layer, attention_mask)

        return (
            query_layer,
            key_layer,
            value_layer,
            indices_q,
            (cu_seqlens_q, cu_seqlens_k),
            (max_seqlen_in_batch_q, max_seqlen_in_batch_k),
        )


class ARCHunyuanVideoSdpaAttention(ARCHunyuanVideoAttention):
    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[Cache] = None,
        output_attentions: bool = False,
        use_cache: bool = False,
        kv_states: torch.Tensor = None,
    ) -> tuple[torch.Tensor, Optional[torch.Tensor], Optional[tuple[torch.Tensor]]]:
        if output_attentions:
            return super().forward(
                hidden_states=hidden_states,
                attention_mask=attention_mask,
                position_ids=position_ids,
                past_key_value=past_key_value,
                output_attentions=output_attentions,
                use_cache=use_cache,
            )

        bsz, q_len, _ = hidden_states.size()

        qkv_states = self.qkv_proj(hidden_states)
        qkv_states = qkv_states.reshape(
            bsz, q_len, self.num_key_value_heads, self.num_key_value_groups + 2, self.head_dim
        )
        query_states, key_states, value_states = torch.split(qkv_states, (self.num_key_value_groups, 1, 1), dim=3)
        orig_key_states, orig_value_states = key_states, value_states

        query_states = query_states.reshape(bsz, q_len, self.num_heads, self.head_dim).transpose(1, 2)
        key_states = key_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)
        value_states = value_states.reshape(bsz, q_len, self.num_key_value_heads, self.head_dim).transpose(1, 2)

        kv_seq_len = key_states.shape[-2]
        if past_key_value is not None:
            kv_seq_len += past_key_value.get_usable_length(kv_seq_len, self.layer_idx)

        if self.use_rotary_pos_emb:
            cos, sin = self.rotary_emb(value_states, seq_len=kv_seq_len)
            if self.position_embedding_xdrope and (
                past_key_value is None or past_key_value.get_usable_length(kv_seq_len, self.layer_idx) == 0
            ):
                output_size = (query_states.size(0), query_states.size(1), query_states.size(2), key_states.size(2))
                bf16 = self.config.torch_dtype == torch.bfloat16
                query_states, key_states = apply_rotary_pos_emb_xdrope(
                    query_states, key_states, cos, sin, position_ids, self.xdrope_section, output_size, bf16
                )
            else:
                if not self.position_embedding_xdrope:
                    query_states, key_states = apply_rotary_pos_emb(query_states, key_states, cos, sin, position_ids)
                else:
                    position_ids = torch.ones(
                        1, position_ids.shape[1], 1, dtype=torch.long, device=position_ids.device
                    ) * past_key_value.get_usable_length(kv_seq_len, self.layer_idx)

                    output_size = (
                        query_states.size(0),
                        query_states.size(1),
                        query_states.size(2),
                        key_states.size(2),
                    )
                    bf16 = self.config.torch_dtype == torch.bfloat16
                    query_states, key_states = apply_rotary_pos_emb_xdrope(
                        query_states, key_states, cos, sin, position_ids, self.xdrope_section, output_size, bf16
                    )

        if self.use_qk_norm:
            query_states = self.query_layernorm(query_states)
            key_states = self.key_layernorm(key_states)

        if past_key_value is not None:
            key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx)

        key_states = repeat_kv(key_states, self.num_key_value_groups)
        value_states = repeat_kv(value_states, self.num_key_value_groups)

        if query_states.device.type == "cuda" and attention_mask is not None:
            query_states = query_states.contiguous()
            key_states = key_states.contiguous()
            value_states = value_states.contiguous()

        attn_output = torch.nn.functional.scaled_dot_product_attention(
            query_states,
            key_states,
            value_states,
            attn_mask=attention_mask,
            dropout_p=self.attention_dropout if self.training else 0.0,
            is_causal=self.is_causal and q_len > 1,
        )

        attn_output = attn_output.transpose(1, 2).contiguous()
        attn_output = attn_output.reshape(bsz, q_len, -1)
        attn_output = self.o_proj(attn_output)

        return attn_output, None, past_key_value, (orig_key_states, orig_value_states)


ARCHUNYUANVIDEO_ATTENTION_CLASSES = {
    "eager": ARCHunyuanVideoAttention,
    "flash_attention_2": ARCHunyuanVideoFlashAttention2,
    "sdpa": ARCHunyuanVideoSdpaAttention,
}


class ARCHunyuanVideoDecoderLayer(nn.Module):
    def __init__(self, config, layer_idx: int):
        super().__init__()
        self.hidden_size = config.hidden_size
        self.layer_idx = layer_idx

        self.self_attn = ARCHUNYUANVIDEO_ATTENTION_CLASSES[config._attn_implementation](
            config=config, layer_idx=layer_idx
        )
        self.mlp = ARCHunyuanVideoMLP(config, layer_idx=layer_idx)

        if config.norm_type == "hf_rms" or config.norm_type == "rms":
            self.input_layernorm = ARCHunyuanVideoRMSNorm(config.hidden_size, eps=config.rms_norm_eps)
            self.post_attention_layernorm = ARCHunyuanVideoRMSNorm(config.hidden_size, eps=config.rms_norm_eps)
        elif config.norm_type == "fused" or config.norm_type == "torch_nn":
            self.input_layernorm = nn.LayerNorm(config.hidden_size, eps=config.rms_norm_eps)
            self.post_attention_layernorm = nn.LayerNorm(config.hidden_size, eps=config.rms_norm_eps)
        else:
            raise ValueError(f"Unsupported norm_type: {config.norm_type}")

    def forward(
        self,
        hidden_states: torch.Tensor,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_value: Optional[tuple[torch.Tensor]] = None,
        output_attentions: Optional[bool] = False,
        use_cache: Optional[bool] = False,
        kv_states: Optional[tuple[torch.Tensor]] = None,
        **kwargs,
    ) -> tuple[torch.FloatTensor, Optional[tuple[torch.FloatTensor, torch.FloatTensor]]]:
        residual = hidden_states
        hidden_states = self.input_layernorm(hidden_states)

        hidden_states, self_attn_weights, present_key_value, kv_states = self.self_attn(
            hidden_states=hidden_states,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_value=past_key_value,
            output_attentions=output_attentions,
            use_cache=use_cache,
            kv_states=kv_states,
            **kwargs,
        )
        hidden_states = residual + hidden_states

        residual = hidden_states
        hidden_states = self.post_attention_layernorm(hidden_states)
        hidden_states = self.mlp(hidden_states)
        hidden_states = residual + hidden_states

        outputs = (hidden_states,)
        if output_attentions:
            outputs += (self_attn_weights,)
        if use_cache:
            outputs += (present_key_value,)
        outputs += (kv_states,)
        return outputs


################################################################################
# Text Model
################################################################################


class ARCHunyuanVideoTextModel(ARCHunyuanVideoPreTrainedModel):
    config_class = ARCHunyuanVideoTextConfig

    def __init__(self, config: ARCHunyuanVideoTextConfig):
        super().__init__(config)
        self.padding_idx = config.pad_token_id
        self.vocab_size = config.vocab_size

        self.embed_tokens = nn.Embedding(config.vocab_size, config.hidden_size, self.padding_idx)
        self.layers = nn.ModuleList(
            [ARCHunyuanVideoDecoderLayer(config, layer_idx) for layer_idx in range(config.num_hidden_layers)]
        )
        self._use_sdpa = config._attn_implementation == "sdpa"
        self._use_flash_attention_2 = config._attn_implementation == "flash_attention_2"
        self.norm = ARCHunyuanVideoRMSNorm(config.hidden_size, eps=config.rms_norm_eps)

        self.gradient_checkpointing = False
        self.post_init()

    def get_input_embeddings(self):
        return self.embed_tokens

    def set_input_embeddings(self, value):
        self.embed_tokens = value

    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[list[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[tuple, BaseModelOutputWithPast]:
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        use_cache = use_cache if use_cache is not None else self.config.use_cache
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        if input_ids is not None:
            batch_size, seq_length = input_ids.shape[:2]
        elif inputs_embeds is not None:
            batch_size, seq_length = inputs_embeds.shape[:2]
        else:
            raise ValueError("You have to specify either input_ids or inputs_embeds")

        if self.gradient_checkpointing and self.training:
            if use_cache:
                logger.warning_once(
                    "`use_cache=True` is incompatible with gradient checkpointing. Setting `use_cache=False`..."
                )
                use_cache = False

        past_key_values_length = 0
        if use_cache:
            use_legacy_cache = not isinstance(past_key_values, Cache)
            if use_legacy_cache:
                past_key_values = DynamicCache.from_legacy_cache(past_key_values)
            past_key_values_length = past_key_values.get_usable_length(seq_length)

        if position_ids is None:
            device = input_ids.device if input_ids is not None else inputs_embeds.device
            position_ids = torch.arange(
                past_key_values_length, seq_length + past_key_values_length, dtype=torch.long, device=device
            )
            position_ids = position_ids.unsqueeze(0)

        if inputs_embeds is None:
            inputs_embeds = self.embed_tokens(input_ids)

        if self._use_flash_attention_2:
            attention_mask = attention_mask if (attention_mask is not None and 0 in attention_mask) else None
        elif self._use_sdpa and not output_attentions:
            attention_mask = _prepare_4d_causal_attention_mask_for_sdpa(
                attention_mask,
                (batch_size, seq_length),
                inputs_embeds,
                past_key_values_length,
            )
        else:
            attention_mask = _prepare_4d_causal_attention_mask(
                attention_mask, (batch_size, seq_length), inputs_embeds, past_key_values_length
            )

        hidden_states = inputs_embeds
        all_hidden_states = () if output_hidden_states else None
        all_self_attns = () if output_attentions else None
        next_decoder_cache = None
        prev_kv_states = None
        for layer_idx, decoder_layer in enumerate(self.layers):
            if output_hidden_states:
                all_hidden_states += (hidden_states,)

            if self.gradient_checkpointing and self.training:
                layer_outputs = torch.utils.checkpoint.checkpoint(
                    decoder_layer.__call__,
                    hidden_states,
                    attention_mask,
                    position_ids,
                    past_key_values,
                    output_attentions,
                    use_cache,
                    prev_kv_states,
                )
            else:
                layer_outputs = decoder_layer(
                    hidden_states,
                    attention_mask=attention_mask,
                    position_ids=position_ids,
                    past_key_value=past_key_values,
                    output_attentions=output_attentions,
                    use_cache=use_cache,
                    kv_states=prev_kv_states,
                )

            hidden_states = layer_outputs[0]
            if use_cache:
                next_decoder_cache = layer_outputs[2 if output_attentions else 1]
            if output_attentions:
                all_self_attns += (layer_outputs[1],)
            kv_states = layer_outputs[-1]

        hidden_states = self.norm(hidden_states)

        if output_hidden_states:
            all_hidden_states += (hidden_states,)

        next_cache = None
        if use_cache:
            next_cache = next_decoder_cache.to_legacy_cache() if use_legacy_cache else next_decoder_cache
        if not return_dict:
            return tuple(v for v in [hidden_states, next_cache, all_hidden_states, all_self_attns] if v is not None)
        return BaseModelOutputWithPast(
            last_hidden_state=hidden_states,
            past_key_values=next_cache,
            hidden_states=all_hidden_states,
            attentions=all_self_attns,
        )


class ARCHunyuanVideoTextModelForCausalLM(ARCHunyuanVideoPreTrainedModel, GenerationMixin):
    _tied_weights_keys = ["lm_head.weight"]

    def __init__(self, config: ARCHunyuanVideoTextConfig):
        super().__init__(config)
        self.config = config
        self.model = ARCHunyuanVideoTextModel(config)
        self.vocab_size = config.vocab_size
        self.lm_head = nn.Linear(config.hidden_size, config.vocab_size, bias=False)

        self.post_init()

    def get_input_embeddings(self):
        return self.model.get_input_embeddings()

    def set_input_embeddings(self, value):
        self.model.set_input_embeddings(value)

    def get_output_embeddings(self):
        return self.lm_head

    def set_output_embeddings(self, new_embeddings):
        self.lm_head = new_embeddings

    def set_decoder(self, decoder):
        self.model = decoder

    def get_decoder(self):
        return self.model

    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[list[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
    ) -> Union[tuple, CausalLMOutputWithPast]:
        output_attentions = output_attentions if output_attentions is not None else self.config.output_attentions
        output_hidden_states = (
            output_hidden_states if output_hidden_states is not None else self.config.output_hidden_states
        )
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
        # decoder outputs consists of (dec_features, layer_state, dec_hidden, dec_attn)
        outputs = self.model(
            input_ids=input_ids,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            inputs_embeds=inputs_embeds,
            use_cache=use_cache,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )

        hidden_states = outputs[0]
        logits = self.lm_head(hidden_states)

        loss = None
        if labels is not None:
            # Shift so that tokens < n predict n
            shift_logits = logits[..., :-1, :].contiguous()
            shift_labels = labels[..., 1:].contiguous()
            # Flatten the tokens
            loss_fct = CrossEntropyLoss()
            shift_logits = shift_logits.reshape(-1, self.config.vocab_size)
            shift_labels = shift_labels.reshape(-1)
            # Enable model parallelism
            shift_labels = shift_labels.to(shift_logits.device)
            loss = loss_fct(shift_logits, shift_labels)

        if not return_dict:
            output = (logits,) + outputs[1:]
            return (loss,) + output if loss is not None else output

        return CausalLMOutputWithPast(
            loss=loss,
            logits=logits,
            past_key_values=outputs.past_key_values,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )

    def prepare_inputs_for_generation(
        self, input_ids, past_key_values=None, attention_mask=None, inputs_embeds=None, cache_position=None, **kwargs
    ):
        if past_key_values is not None:
            if isinstance(past_key_values, Cache):
                cache_length = past_key_values.get_seq_length()
                past_length = cache_position[-1]
                max_cache_length = past_key_values.get_max_cache_shape()
            else:
                cache_length = past_length = past_key_values[0][0].shape[2]
                max_cache_length = None

            if attention_mask is not None and attention_mask.shape[1] > input_ids.shape[1]:
                input_ids = input_ids[:, -(attention_mask.shape[1] - past_length) :]
            elif past_length < input_ids.shape[1]:
                input_ids = input_ids[:, past_length:]

            if max_cache_length is not None and attention_mask is not None:
                if cache_length + input_ids.shape[1] > max_cache_length:
                    attention_mask = attention_mask[:, -max_cache_length:]

        position_ids = kwargs.get("position_ids", None)

        if attention_mask is not None and position_ids is None:
            position_ids = attention_mask.long().cumsum(-1) - 1
            position_ids.masked_fill_(attention_mask == 0, 1)

            if past_key_values:
                position_ids = position_ids[:, -input_ids.shape[1] :]

        if inputs_embeds is not None and cache_length == 0:
            model_inputs = {"inputs_embeds": inputs_embeds}
        else:
            model_inputs = {"input_ids": input_ids}

        model_inputs.update(
            {
                "position_ids": position_ids,
                "past_key_values": past_key_values,
                "use_cache": kwargs.get("use_cache"),
                "attention_mask": attention_mask,
            }
        )

        return model_inputs

    @staticmethod
    def _reorder_cache(past_key_values, beam_idx):
        reordered_past = ()
        for layer_past in past_key_values:
            reordered_past += (
                tuple(past_state.index_select(0, beam_idx.to(past_state.device)) for past_state in layer_past),
            )
        return reordered_past


class ARCHunyuanVideoModel(ARCHunyuanVideoPreTrainedModel):
    def __init__(self, config: ARCHunyuanVideoConfig):
        super().__init__(config)
        self.language_model = ARCHunyuanVideoTextModelForCausalLM(config.text_config)
        self.vision_model = ARCHunyuanVideoVisionModel(config.vision_config, config.text_config)
        self.speech_encoder = ARCHunyuanVideoAudioEncoder(config.audio_config)

        # Additional configs from old version
        self.max_num_frame = getattr(config, "max_num_frame", 150)
        self.speech_dim = config.audio_config.d_model

        # Feature fusion MLPs
        self.mlp2 = nn.Sequential(
            nn.LayerNorm(self.speech_dim),
            nn.Linear(self.speech_dim, config.text_config.hidden_size),
            nn.GELU(),
            nn.Linear(config.text_config.hidden_size, config.text_config.hidden_size),
        )

    def get_input_embeddings(self):
        return self.language_model.get_input_embeddings()

    def set_input_embeddings(self, value):
        self.language_model.set_input_embeddings(value)

    def get_output_embeddings(self):
        return self.language_model.get_output_embeddings()

    def set_output_embeddings(self, new_embeddings):
        self.language_model.set_output_embeddings(new_embeddings)

    def extract_feature(self, pixel_values):
        with torch.no_grad():
            vit_embeds = self.vision_model(pixel_values)
        return vit_embeds

    def extract_audio_feature(self, audio_values):
        audio_values = audio_values.squeeze(0).reshape(-1, 128, audio_values.shape[-1])
        num_segments = audio_values.shape[0]

        with torch.no_grad():
            speech_embeds = self.speech_encoder(audio_values, return_dict=True).last_hidden_state
        speech_embeds = speech_embeds.reshape(1, -1, speech_embeds.shape[-1])
        speech_embeds = self.mlp2(speech_embeds)
        return num_segments, speech_embeds

    def forward(
        self,
        input_ids: torch.LongTensor = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        past_key_values: Optional[list[torch.FloatTensor]] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        labels: Optional[torch.LongTensor] = None,
        use_cache: Optional[bool] = None,
        output_attentions: Optional[bool] = None,
        output_hidden_states: Optional[bool] = None,
        return_dict: Optional[bool] = None,
        pixel_values: Optional[torch.FloatTensor] = None,
        audio_features: Optional[torch.FloatTensor] = None,
        duration: Optional[int] = None,
        **kwargs,
    ) -> Union[tuple, CausalLMOutputWithPast]:
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict

        if inputs_embeds is None:
            inputs_embeds = self.language_model.get_input_embeddings()(input_ids)

        if pixel_values is not None and audio_features is not None:
            vit_embeds = self.extract_feature(pixel_values)
            _, audio_embeds = self.extract_audio_feature(audio_features)

            # Reshape audio embeds to match video frames
            audio_embeds = audio_embeds.reshape(audio_embeds.shape[0], -1, 50, audio_embeds.shape[-1])
            if duration is not None:
                audio_embeds_no_pad = audio_embeds[:, :duration].squeeze(0)
            else:
                audio_embeds_no_pad = audio_embeds.squeeze(0)

            if audio_embeds_no_pad.shape[0] > self.max_num_frame:
                per_audio_tokens = math.ceil(audio_embeds_no_pad.shape[0] / self.max_num_frame * 50)
                num_audio_tokens_sum = per_audio_tokens * self.max_num_frame
                audio_embeds_no_pad = audio_embeds_no_pad.reshape(-1, audio_embeds_no_pad.shape[-1])
                if num_audio_tokens_sum != audio_embeds_no_pad.shape[0]:
                    zero_padding = (
                        torch.zeros(num_audio_tokens_sum - audio_embeds_no_pad.shape[0], audio_embeds_no_pad.shape[-1])
                        .to(audio_embeds_no_pad.dtype)
                        .to(audio_embeds_no_pad.device)
                    )
                    audio_embeds_no_pad = torch.cat((audio_embeds_no_pad, zero_padding), dim=0)
                audio_embeds_no_pad = audio_embeds_no_pad.reshape(
                    self.max_num_frame, -1, audio_embeds_no_pad.shape[-1]
                )

            # Pad audio embeds to match video embeds length
            padding_size = vit_embeds.shape[1] - audio_embeds_no_pad.shape[1]
            if padding_size != 0:
                zero_padding = (
                    torch.zeros(vit_embeds.shape[0], padding_size, audio_embeds_no_pad.shape[-1])
                    .to(audio_embeds_no_pad.dtype)
                    .to(audio_embeds_no_pad.device)
                )
                audio_embeds_pad = torch.cat((audio_embeds_no_pad, zero_padding), dim=1)
            else:
                audio_embeds_pad = audio_embeds_no_pad

            # Fuse video and audio features
            mixed_embeds = vit_embeds + audio_embeds_pad

            # Replace image tokens with mixed embeddings
            B, N, C = inputs_embeds.shape
            inputs_embeds = inputs_embeds.reshape(B * N, C)
            input_ids = input_ids.reshape(B * N)
            selected = input_ids == self.config.text_config.image_token_id
            if selected.sum() > 0:
                inputs_embeds[selected] = mixed_embeds.reshape(-1, C).to(inputs_embeds.device).to(inputs_embeds.dtype)
            inputs_embeds = inputs_embeds.reshape(B, N, C)

        # Different from original transformers version; For training
        outputs = self.language_model(
            input_ids=None,
            attention_mask=attention_mask,
            position_ids=position_ids,
            past_key_values=past_key_values,
            inputs_embeds=inputs_embeds,
            use_cache=use_cache,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )
        logits = outputs.logits

        loss = None
        if labels is not None:
            # Shift so that tokens < n predict n
            shift_logits = logits[..., :-1, :].contiguous()
            shift_labels = labels[..., 1:].contiguous()
            # Flatten the tokens
            loss_fct = CrossEntropyLoss()
            shift_logits = shift_logits.view(-1, self.language_model.config.vocab_size)
            shift_labels = shift_labels.view(-1)
            # Enable model parallelism
            shift_labels = shift_labels.to(shift_logits.device)
            loss = loss_fct(shift_logits, shift_labels)

        if not return_dict:
            output = (logits,) + outputs[1:]
            return (loss,) + output if loss is not None else output

        return CausalLMOutputWithPast(
            loss=loss,
            logits=logits,
            past_key_values=outputs.past_key_values,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )


class ARCHunyuanVideoForConditionalGeneration(ARCHunyuanVideoModel, GenerationMixin):
    def __init__(self, config: ARCHunyuanVideoConfig):
        super().__init__(config)

    @torch.no_grad()
    def generate(
        self,
        input_ids: Optional[torch.FloatTensor] = None,
        attention_mask: Optional[torch.Tensor] = None,
        position_ids: Optional[torch.LongTensor] = None,
        inputs_embeds: Optional[torch.FloatTensor] = None,
        pixel_values: Optional[torch.FloatTensor] = None,
        audio_features: Optional[torch.FloatTensor] = None,
        duration: Optional[int] = None,
        generation_config: Optional[GenerationConfig] = None,
        output_hidden_states: Optional[bool] = None,
        **generate_kwargs,
    ) -> torch.LongTensor:
        if generation_config is None:
            generation_config = self.generation_config

        if position_ids is None:
            # Get position_ids for xdrope
            _, position_ids = self.get_attention_masks_and_position_ids(
                input_ids.unsqueeze(0),
                self.config.text_config.eod_token_id,
                self.config.text_config.im_start_id,
                self.config.text_config.im_end_id,
                self.config.text_config.im_newline_id,
                xdrope_section=self.config.text_config.xdrope_section,
            )

        # The newline token is intended to be used as a separator between video frames.
        # After calculating the position ids, we replace the newline token with the image token.
        input_ids[input_ids == self.config.text_config.im_newline_id] = self.config.text_config.image_token_id

        input_ids = input_ids.unsqueeze(0).to(self.device)

        if attention_mask is None:
            attention_mask = input_ids.ne(self.config.text_config.pad_token_id)

        if pixel_values is not None and audio_features is not None:
            # Extract and process video features
            vit_embeds = self.extract_feature(pixel_values)
            _, audio_embeds = self.extract_audio_feature(audio_features)

            # Reshape audio embeds to match video frames
            audio_embeds = audio_embeds.reshape(audio_embeds.shape[0], -1, 50, audio_embeds.shape[-1])
            if duration is not None:
                audio_embeds_no_pad = audio_embeds[:, :duration].squeeze(0)
            else:
                audio_embeds_no_pad = audio_embeds.squeeze(0)

            # Handle long audio sequences
            if audio_embeds_no_pad.shape[0] > self.max_num_frame:
                per_audio_tokens = math.ceil(audio_embeds_no_pad.shape[0] / self.max_num_frame * 50)
                num_audio_tokens_sum = per_audio_tokens * self.max_num_frame
                audio_embeds_no_pad = audio_embeds_no_pad.reshape(-1, audio_embeds_no_pad.shape[-1])
                if num_audio_tokens_sum != audio_embeds_no_pad.shape[0]:
                    zero_padding = (
                        torch.zeros(num_audio_tokens_sum - audio_embeds_no_pad.shape[0], audio_embeds_no_pad.shape[-1])
                        .to(audio_embeds_no_pad.dtype)
                        .to(audio_embeds_no_pad.device)
                    )
                    audio_embeds_no_pad = torch.cat((audio_embeds_no_pad, zero_padding), dim=0)
                audio_embeds_no_pad = audio_embeds_no_pad.reshape(
                    self.max_num_frame, -1, audio_embeds_no_pad.shape[-1]
                )

            # Pad audio embeds to match video embeds length
            padding_size = vit_embeds.shape[1] - audio_embeds_no_pad.shape[1]
            if padding_size != 0:
                zero_padding = (
                    torch.zeros(vit_embeds.shape[0], padding_size, audio_embeds_no_pad.shape[-1])
                    .to(audio_embeds_no_pad.dtype)
                    .to(audio_embeds_no_pad.device)
                )
                audio_embeds_pad = torch.cat((audio_embeds_no_pad, zero_padding), dim=1)
            else:
                audio_embeds_pad = audio_embeds_no_pad

            # Fuse video and audio features
            mixed_embeds = vit_embeds + audio_embeds_pad

            # Create or modify input embeddings
            if inputs_embeds is None:
                inputs_embeds = self.language_model.get_input_embeddings()(input_ids)

            # Replace image tokens with mixed embeddings
            B, N, C = inputs_embeds.shape
            inputs_embeds = inputs_embeds.reshape(B * N, C)
            input_ids = input_ids.reshape(B * N)
            selected = input_ids == self.config.text_config.image_token_id
            if selected.sum() > 0:
                inputs_embeds[selected] = mixed_embeds.reshape(-1, C).to(inputs_embeds.device).to(inputs_embeds.dtype)
            inputs_embeds = inputs_embeds.reshape(B, N, C)

        # Generate text using the text model
        outputs = self.language_model.generate(
            inputs_embeds=inputs_embeds,
            position_ids=position_ids,
            attention_mask=attention_mask,
            generation_config=generation_config,
            output_hidden_states=output_hidden_states,
            use_cache=True,
            **generate_kwargs,
        )

        return outputs

    def generate_tokens(self, w=448, h=448, use_xrope=True):
        total_patch_size = 16 * 2 * 2
        tokens = ""
        tokens += "<img>"
        tokens += "<IMG_CONTEXT>"
        for i in range(h // total_patch_size):
            for j in range(w // total_patch_size):
                tokens += "<IMG_CONTEXT>"
            if use_xrope:
                tokens += "<newline>"
            else:
                tokens += "<IMG_CONTEXT>"
        tokens += "<IMG_CONTEXT>"
        tokens += "</img>"
        return tokens

    def get_xdrope_position_ids(
        self,
        position_ids_t,
        position_ids_x,
        position_ids_y,
        b,
        prev_index,
        boi_index,
        eoi_index,
        eol_index,
    ):
        idx_cur = 0
        for x in range(boi_index.size()[0]):
            m = boi_index[x]
            n = eoi_index[x]
            assert m < n

            if m >= prev_index:
                position_ids_t[b, m + 1 + 1 : n - 1] = idx_cur
                idx_cur += 1

                eol_idx_list = []
                for y in range(eol_index.size()[0]):
                    eol_idx = eol_index[y]
                    if eol_idx > m and eol_idx < n:
                        eol_idx_list.append(eol_idx)
                row = len(eol_idx_list)
                assert row > 0, "the row of an image must be a positive integer"
                column = torch.round((n - m - 2 - 1) / row).long().item()

                assert row * column == n - m - 2 - 1, f"row:\t{row}, column:\t{column}, n:\t{n}, m:\t{m}"

                idx_xy = 0
                for rr in range(row):
                    for cc in range(column):
                        position_ids_x[b, m + 1 + 1 + idx_xy] = cc
                        position_ids_y[b, m + 1 + 1 + idx_xy] = rr
                        idx_xy += 1

        return position_ids_t, position_ids_x, position_ids_y

    def get_attention_masks_and_position_ids(
        self, data, eod_id, im_start_id, im_end_id, im_newline_id, xdrope_section
    ):
        micro_batch_size, seq_length = data.size()
        att_mask_batch = 1
        attention_mask = (
            torch.tril(torch.ones((att_mask_batch, seq_length, seq_length))).view(
                att_mask_batch, 1, seq_length, seq_length
            )
            # .int()
        )
        position_ids = torch.arange(seq_length, dtype=torch.long, device=data.device)
        position_ids = position_ids.unsqueeze(0).expand_as(data)

        position_ids_t = position_ids.clone()
        position_ids_x = position_ids.clone()
        position_ids_y = position_ids.clone()

        for b in range(micro_batch_size):
            prev_index = 0
            boi_index = position_ids[b, data[b] == im_start_id]
            eoi_index = position_ids[b, data[b] == im_end_id]
            eol_index = position_ids[b, data[b] == im_newline_id]

            position_ids_t, position_ids_x, position_ids_y = self.get_xdrope_position_ids(
                position_ids_t, position_ids_x, position_ids_y, b, prev_index, boi_index, eoi_index, eol_index
            )

        if len(xdrope_section) == 2:
            position_ids = torch.cat([position_ids.unsqueeze(1), position_ids_t.unsqueeze(1)], dim=1)
        elif len(xdrope_section) == 3:
            position_ids = torch.cat(
                [position_ids_x.unsqueeze(1), position_ids_y.unsqueeze(1), position_ids_t.unsqueeze(1)], dim=1
            )
        elif len(xdrope_section) == 4:
            position_ids = torch.cat(
                [
                    position_ids.unsqueeze(1),
                    position_ids_x.unsqueeze(1),
                    position_ids_y.unsqueeze(1),
                    position_ids_t.unsqueeze(1),
                ],
                dim=1,
            )
        else:
            raise ValueError(f"not support xdrope section value:\t{xdrope_section}")

        return attention_mask, position_ids


__all__ = ["ARCHunyuanVideoForConditionalGeneration", "ARCHunyuanVideoVisionModel", "ARCHunyuanVideoAudioEncoder"]
